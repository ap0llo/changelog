using System.Linq;
using Grynwald.ChangeLog.Configuration;
using Grynwald.ChangeLog.Templates.ViewModel;
using Grynwald.MarkdownGenerator;

namespace Grynwald.ChangeLog.Templates.GitHubRelease
{
    internal class GitHubReleaseTemplate : MarkdownBaseTemplate
    {
        /// <inheritdoc />
        protected override MdSerializationOptions SerializationOptions => MdSerializationOptions.Default;


        public GitHubReleaseTemplate(ChangeLogConfiguration configuration) : base(configuration)
        { }


        /// <inheritdoc />
        protected override MdDocument GetChangeLogDocument(ApplicationChangeLogViewModel viewModel)
        {
            if (viewModel.Versions.Count() > 1)
                throw new TemplateExecutionException("The GitHub Release template cannot render change logs that contain multiple versions");

            if (!viewModel.Versions.Any())
                return new MdDocument(GetEmptyBlock());

            // Return changes for only a single change, omit surrounding headers
            return new MdDocument(
                GetVersionContentBlock(viewModel.Versions.Single())
            );
        }

        /// <inheritdoc />
        protected override MdBlock GetSummaryListHeaderBlock(ChangeLogEntryGroupViewModel viewModel)
        {
            // in GitHub releases, the top heading is <h2> because higher,            
            return new MdHeading(2, viewModel.Title);
        }

        /// <inheritdoc />
        protected override MdBlock GetBreakingChangesListHeaderBlock()
        {
            // in GitHub releases, the top heading is <h2> because higher,
            return new MdHeading(2, "Breaking Changes");
        }

        /// <inheritdoc />
        protected override MdBlock GetDetailSectionHeaderBlock(SingleVersionChangeLogViewModel viewModel)
        {
            // in GitHub releases, the top heading is <h2> because higher,
            return new MdHeading(2, "Details");
        }

        /// <inheritdoc />
        protected override MdBlock GetEntryDetailHeaderBlock(ChangeLogEntryViewModel viewModel)
        {
            // in GitHub releases, the top heading is <h2> because higher,
            // => the header for individual entries is the level of the "details" header + 1 => 3
            return new MdHeading(3, viewModel.Title);
        }

        /// <inheritdoc />
        protected override string GetHtmlHeadingId(ChangeLogEntryViewModel viewModel)
        {
            // use default header ids generated by GitHub instead of setting a header explicitly
            return HtmlUtilities.ToUrlSlug(viewModel.Title);
        }
    }
}
